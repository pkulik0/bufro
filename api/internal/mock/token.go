// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pkulik0/bufro/api/internal/auth (interfaces: Token)
//
// Generated by this command:
//
//	mockgen -destination=../mock/token.go -package=mock . Token
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockToken is a mock of Token interface.
type MockToken struct {
	ctrl     *gomock.Controller
	recorder *MockTokenMockRecorder
}

// MockTokenMockRecorder is the mock recorder for MockToken.
type MockTokenMockRecorder struct {
	mock *MockToken
}

// NewMockToken creates a new mock instance.
func NewMockToken(ctrl *gomock.Controller) *MockToken {
	mock := &MockToken{ctrl: ctrl}
	mock.recorder = &MockTokenMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockToken) EXPECT() *MockTokenMockRecorder {
	return m.recorder
}

// AccessToken mocks base method.
func (m *MockToken) AccessToken() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccessToken")
	ret0, _ := ret[0].(string)
	return ret0
}

// AccessToken indicates an expected call of AccessToken.
func (mr *MockTokenMockRecorder) AccessToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccessToken", reflect.TypeOf((*MockToken)(nil).AccessToken))
}

// ExpiresIn mocks base method.
func (m *MockToken) ExpiresIn() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExpiresIn")
	ret0, _ := ret[0].(int)
	return ret0
}

// ExpiresIn indicates an expected call of ExpiresIn.
func (mr *MockTokenMockRecorder) ExpiresIn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpiresIn", reflect.TypeOf((*MockToken)(nil).ExpiresIn))
}

// RefreshExpiresIn mocks base method.
func (m *MockToken) RefreshExpiresIn() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshExpiresIn")
	ret0, _ := ret[0].(int)
	return ret0
}

// RefreshExpiresIn indicates an expected call of RefreshExpiresIn.
func (mr *MockTokenMockRecorder) RefreshExpiresIn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshExpiresIn", reflect.TypeOf((*MockToken)(nil).RefreshExpiresIn))
}

// RefreshToken mocks base method.
func (m *MockToken) RefreshToken() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshToken")
	ret0, _ := ret[0].(string)
	return ret0
}

// RefreshToken indicates an expected call of RefreshToken.
func (mr *MockTokenMockRecorder) RefreshToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshToken", reflect.TypeOf((*MockToken)(nil).RefreshToken))
}

// Scope mocks base method.
func (m *MockToken) Scope() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scope")
	ret0, _ := ret[0].(string)
	return ret0
}

// Scope indicates an expected call of Scope.
func (mr *MockTokenMockRecorder) Scope() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scope", reflect.TypeOf((*MockToken)(nil).Scope))
}
